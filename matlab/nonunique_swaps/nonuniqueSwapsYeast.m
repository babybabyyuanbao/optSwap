function out = nonuniqueSwapsYeast()

    targets = getTargets()
    dhs = {'GAPD', ...
           'NADH2-u6cm', ...
           'ICDHy', ...
           'GLUDyi', ...
           'PGCD', ...
           'ALDD2y', ...
           'GND', ...
           'G6PDH2', ...
           'ASADi', ...
           'HSDxi', ...
           'IPMD', ...
           'AASAD2', ...
           'SACCD1', ...
           'SACCD2', ...
           'SHK3D', ...
           'G3PD1ir', ...
           'XYLR', ...
           'XYLTD_D', ...
           'ALCD2x', ...
           'GLUSx', ...
           'MDH', ...
           'GLYCDy'};

    substrates = {'EX_glc(e)', 'EX_xyl-D(e)', 'EX_glc(e)', 'EX_xyl-D(e)'};
    aerobicity = {'anaerobic', 'anaerobic', 'aerobic', 'aerobic'};
    necessary_ex = {'EX_ergst(e)', 'EX_zymst(e)', 'EX_hdcea(e)', ...
                    'EX_ocdca(e)', 'EX_ocdcea(e)', ...
                    'EX_ocdcya(e)'};

    out = cell(length(targets), 4);

    for i=1:length(substrates)
        [model, biomass] = setupModel('iMM904', substrates(i), aerobicity(i));
        if (i==2)
            soln = optimizeCbModel(model);
            minBiomass = 0.1*soln.f;
        else
            minBiomass = 0.1;
        end
        nondefaultReactionBounds = [];
        if strcmp(aerobicity(i), 'anaerobic') %anaerobic
            nondefaultReactionBounds = cell(1, length(necessary_ex));
            % only allow the ammount of these exchanges necessary to sustain normal growth
            for z=1:length(necessary_ex)
                soln_wt = optimizeCbModel(model);
                nondefaultReactionBounds{z} = {necessary_ex{z}, ...
                                    soln_wt.x(ismember(model.rxns, necessary_ex{z})), 0};
            end
        end
        for k=1:length(targets)
            unique = {};
            max = 0;
            for l=1:length(dhs)
                temp = modelSwap(model, dhs(l), false);
                temp = changeRxnBounds(temp, biomass, minBiomass, 'l');
                temp = changeObjective(temp, targets(k));
                for z=1:length(nondefaultReactionBounds)
                    temp = changeRxnBounds(temp, nondefaultReactionBounds{z}{1}, ...
                                           nondefaultReactionBounds{z}{2}, 'l');
                    temp = changeRxnBounds(temp, nondefaultReactionBounds{z}{1}, ...
                                           nondefaultReactionBounds{z}{3}, 'u');
                end
                soln = optimizeCbModel(temp);
                if (soln.f > 1.01*max)
                    max = soln.f;
                    unique = dhs(l);
                elseif (soln.f > 0.99*max)
                    unique{end+1} = dhs{l};
                end
            end
            out{k,i} = unique;
        end
    end

    % save
    id = fopen('nonunique-yeast.tsv', 'w');
    for i=1:size(out,1)
        for j=1:size(out, 2)
            for k=1:length(out{i,j})
                fprintf(id, '%s;', out{i,j}{k});
            end;
            fprintf(id, '\t');
        end
        fprintf(id, '\n');
    end
    fclose(id);
end

function t = getTargets()
    t = {'EX_ser-L(e)',...
         'EX_cys-L(e)',...
         'EX_lac-L(e)',...
         'EX_met-L(e)',...
         'EX_phe-L(e)',...
         'EX_pyr(e)',...
         'EX_thym(e)',...
         'EX_acald(e)',...
         'EX_g3pc(e)',...
         'EX_gly(e)',...
         'EX_lys-L(e)',...
         'EX_pro-L(e)',...
         'EX_asn-L(e)',...
         'EX_ttdca(e)',...
         'EX_dttp(e)',...
         'EX_ile-L(e)',...
         'EX_oaa(e)',...
         'EX_asp-L(e)',...
         'EX_spmd(e)',...
         'EX_for(e)',...
         'EX_arg-L(e)',...
         'EX_leu-L(e)',...
         'EX_orn(e)',...
         'EX_ptrc(e)',...
         'EX_urea(e)',...
         'EX_trp-L(e)',...
         'EX_2phetoh(e)',...
         'EX_epist(e)',...
         'EX_fecost(e)',...
         'EX_zymst(e)',...
         'EX_ergst(e)',...
         'EX_glx(e)',...
         'EX_lanost(e)',...
         'EX_so3(e)',...
         'EX_pnto-R(e)',...
         'EX_thr-L(e)',...
         'EX_val-L(e)',...
         'EX_ala-L(e)'};
end